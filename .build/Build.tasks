<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Go" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="VersionBuilding" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <version ParameterType="System.String" Required="true"/>
      <stream ParameterType="System.String" Required="true"/>
      <fullVersion ParameterType="System.String" Output="true"/>
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[ 
            var builder = new StringBuilder(version.Length+stream.Length);
            var parts = (version+".0.0").Split('.');
            var buildId = int.Parse(parts[3]);
            if (buildId < 100)
            {
                parts[3] = buildId.ToString("00");
            }
            else if (buildId < 1000)
            {
                parts[3] = buildId.ToString("000");
            }
            else
            {
                parts[3] = buildId.ToString("00000");
            }
            builder.AppendFormat("{0}.{1}.{2}-{4}-{3}", parts[0], parts[1], parts[2], parts[3], stream);
            fullVersion=builder.ToString();
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="RegexTransform" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            foreach(ITaskItem item in Items) {
              string fileName = item.GetMetadata("FullPath");
              string find = item.GetMetadata("Find");
              string replaceWith = item.GetMetadata("ReplaceWith");
              
              if(!File.Exists(fileName)) {
                Log.LogError(null, null, null, null, 0, 0, 0, 0, String.Format("Could not find version file: {0}", fileName), new object[0]);
              }
              string content = File.ReadAllText(fileName);
              File.WriteAllText(
                fileName,
                Regex.Replace(
                  content,
                  find,
                  replaceWith
                )
              );
            }
          ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>