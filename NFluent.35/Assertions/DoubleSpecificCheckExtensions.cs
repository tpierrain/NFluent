// // --------------------------------------------------------------------------------------------------------------------
// // <copyright file="DoubleSpecificCheckExtensions.cs" company="">
// //   Copyright 2014 Thomas PIERRAIN
// //   Licensed under the Apache License, Version 2.0 (the "License");
// //   you may not use this file except in compliance with the License.
// //   You may obtain a copy of the License at
// //       http://www.apache.org/licenses/LICENSE-2.0
// //   Unless required by applicable law or agreed to in writing, software
// //   distributed under the License is distributed on an "AS IS" BASIS,
// //   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// //   See the License for the specific language governing permissions and
// //   limitations under the License.
// // </copyright>
// // --------------------------------------------------------------------------------------------------------------------

using System;
using System.Globalization;

namespace NFluent
{
    using NFluent.Extensibility;

    /// <summary>
    /// Provides specific check methods to be executed on an <see cref="double"/> value.
    /// </summary>
    public static class DoubleSpecificCheckExtensions
    {
        private const string DoNotChangeOrRemoveThisLine = Constants.AutoGeneratedNumberClassDisclaimerPlaceHolder;

        /// <summary>
        /// Determines whether the specified number evaluates to a value that is not a number (NaN).
        /// </summary>
        /// <param name="check">The fluent check to be extended.</param>
        /// <returns>
        /// A check link.
        /// </returns>
        /// <exception cref="FluentCheckException">The current value is a number.</exception>
        public static ICheckLink<ICheck<double>> IsNaN(this ICheck<double> check)
        {
            var checker = ExtensibilityHelper.ExtractChecker(check);

            return checker.ExecuteCheck(
                () =>
                {
                    if (!double.IsNaN(checker.Value))
                    {
                        var errorMessage = checker.BuildMessage("The {0} is a number whereas it must not.").For("double value").On(checker.Value).ToString();
                        throw new FluentCheckException(errorMessage);
                    }
                },
                checker.BuildMessage("The {0} is not a number (NaN) whereas it must.").For("double value").On(checker.Value).ToString());
        }

        /// <summary>
        /// Determines whether the specified number evaluates to a value that is finite (i.e. not infinity).
        /// </summary>
        /// <param name="check">The fluent check to be extended.</param>
        /// <returns>
        /// A check link.
        /// </returns>
        /// <exception cref="FluentCheckException">The specified number evaluates to a value that is infinite (i.e. equals to infinity).</exception>
        public static ICheckLink<ICheck<double>> IsFinite(this ICheck<double> check)
        {
            var checker = ExtensibilityHelper.ExtractChecker(check);

            return checker.ExecuteCheck(
                () =>
                {
                    if (double.IsInfinity(checker.Value))
                    {
                        var errorMessage = checker.BuildMessage("The {0} is an infinite number whereas it must not.").For("double value").On(checker.Value).ToString();
                        throw new FluentCheckException(errorMessage);
                    }
                },
                checker.BuildMessage("The {0} is a finite number whereas it must not.").For("double value").On(checker.Value).ToString());
        }

        /// <summary>
        ///  Determines whether the specified number equals to value with given precision.
        /// </summary>
        /// <param name="check">The fluent check to be extended.</param>
        /// <param name="expected">Expected value</param>
        /// <param name="expectedDelta">Expected precision</param>
        /// <returns>A check link.</returns>
        public static ICheckLink<ICheck<double>> IsEqualTo(this ICheck<double> check, double expected, Delta expectedDelta)
        {
            var checker = ExtensibilityHelper.ExtractChecker(check);
            var errorMessage = String.Format(CultureInfo.InvariantCulture, 
                "Expected: [{0}] but was: [{1}] using delta: [{2}]",
                expected, checker.Value, expectedDelta.Value);
            return checker.ExecuteCheck(() =>
            {
                var delta = Delta.Calculate(checker.Value, expected);
                if (delta > expectedDelta)
                {
                       throw new FluentCheckException(errorMessage);
                }
            }, errorMessage);
        } 
    }
}
