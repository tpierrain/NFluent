// // --------------------------------------------------------------------------------------------------------------------
// // <copyright file="DoubleFloatingPointBinaryRelatedTests.cs" company="">
// //   Copyright 2014 Thomas PIERRAIN
// //   Licensed under the Apache License, Version 2.0 (the "License");
// //   you may not use this file except in compliance with the License.
// //   You may obtain a copy of the License at
// //       http://www.apache.org/licenses/LICENSE-2.0
// //   Unless required by applicable law or agreed to in writing, software
// //   distributed under the License is distributed on an "AS IS" BASIS,
// //   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// //   See the License for the specific language governing permissions and
// //   limitations under the License.
// // </copyright>
// // --------------------------------------------------------------------------------------------------------------------
namespace NFluent.Tests
{
    using NUnit.Framework;

    [TestFixture]
    public class DoubleFloatingPointBinaryRelatedTests
    {
        private const string DoNotChangeOrRemoveThisLine = Constants.AutoGeneratedNumberClassDisclaimerPlaceHolder;
        
        #region IsNaN

        [Test]
        public void IsNaNWorks()
        {
            const double Zero = 0D;
            const double NotANumber = Zero / Zero;

            Check.That(NotANumber).IsNaN();
        }

        [Test]
        [ExpectedException(typeof(FluentCheckException), ExpectedMessage = "\nThe checked double value is a number whereas it must not.\nThe checked double value:\n\t[20]")]
        public void IsNaNThrowsWhenTheValueIsANumber()
        {
            const double Twenty = 20D;

            Check.That(Twenty).IsNaN();
        }

        [Test]
        public void NotIsNaNWorks()
        {
            const double Twenty = 20D;

            Check.That(Twenty).Not.IsNaN();
        }

        [Test]
        [ExpectedException(typeof(FluentCheckException), ExpectedMessage = "\nThe checked double value is not a number (NaN) whereas it must.\nThe checked double value:\n\t[NaN]")]
        public void NotIsNaNThrowsAnExceptionWhenFailing()
        {
            const double Zero = 0D;
            const double NotANumber = Zero / Zero;

            Check.That(NotANumber).Not.IsNaN();
        }

        #endregion

        #region IsFinite

        [Test]
        public void IsFiniteWorks()
        {
            const double Twenty = 20D;

            Check.That(Twenty).IsFinite();
        }

        [Test]
        [ExpectedException(typeof(FluentCheckException), ExpectedMessage = "\nThe checked double value is an infinite number whereas it must not.\nThe checked double value:\n\t[Infinity]")]
        public void IsFiniteThrowsWithInfinity()
        {
            const double Zero = 0D;
            const double Twenty = 20D;
            const double InfiniteNumber = Twenty / Zero;

            Check.That(InfiniteNumber).IsFinite();
        }

        [Test]
        public void NotIsFiniteWorks()
        {
            const double Zero = 0D;
            const double Twenty = 20D;
            const double InfiniteNumber = Twenty / Zero;

            Check.That(InfiniteNumber).Not.IsFinite();
        }

        [Test]
        [ExpectedException(typeof(FluentCheckException), ExpectedMessage = "\nThe checked double value is a finite number whereas it must not.\nThe checked double value:\n\t[20]")]
        public void NotIsFiniteThrowsWithFiniteNumber()
        {
            const double Twenty = 20D;

            Check.That(Twenty).Not.IsFinite();
        }

        [Test]
        public void IsAroundWorks()
        {
            const double Twenty = 20D;
            Check.That(Twenty).IsCloseTo(20.1, 0.2);
        }

        [Test]
        [ExpectedException(typeof(FluentCheckException), ExpectedMessage = "\nThe checked value is outside the expected value range.\nThe checked value:\n\t[20]\nThe expected value:\n\t[20,1 (+/- 0,01)]")]
        public void IsAroundShouldFailsIfToFar()
        {
            const double Twenty = 20D;
            Check.That(Twenty).IsCloseTo(20.1, 0.01);
        }

        #endregion
    }
}
