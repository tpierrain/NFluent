<#+
	// --------------------------------------------------------------------------------------------------------------------
    // <copyright file="TypeCloningHelper.ttinclude" company="">
    //   Copyright 2013 Thomas PIERRAIN
    //   Licensed under the Apache License, Version 2.0 (the "License");
    //   you may not use this file except in compliance with the License.
    //   You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //   Unless required by applicable law or agreed to in writing, software
    //   distributed under the License is distributed on an "AS IS" BASIS,
    //   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    //   See the License for the specific language governing permissions and
    //   limitations under the License.
    // </copyright>
    // --------------------------------------------------------------------------------------------------------------------

public class UnitTestsConfigurationForType
{
	public string TypeName { get; set; }
	public string DetailedTypeName { get; set; }
	public string ValueForZero { get; set; }
	public string ValueForOne { get; set; }
	public string ValueForTwo { get; set; }
	public string ValueForTwenty { get; set; }
	public string ValueForMinusFifty { get; set; }
}

/// <summary>
/// Provides a way to clone an existing generic type into other ones with different type params.
/// </summary>
public static class TypeCloningHelper
{
	public static string GenerateTestSourceCode(string goldenSourceClassFileName, string originalSourceClassName, string checkClassName, UnitTestsConfigurationForType config)
    {
		// Retrieves the class to use as the golden source for all numbers
		StringBuilder sb = new StringBuilder();
		using (StreamReader sr = new StreamReader(goldenSourceClassFileName)) 
		{
			string line;
			// Read and display lines from the file until the end of 
			// the file is reached.
			while ((line = sr.ReadLine()) != null) 
			{
				line = line.Replace("private const string DoNotChangeOrRemoveThisLine = Constants.AutoGeneratedNumberClassDisclaimerPlaceHolder;", "#pragma warning disable 169\n\n        //// ---------------------- WARNING ----------------------\n        //// AUTO-GENERATED FILE WHICH SHOULD NOT BE MODIFIED!\n        //// To change this class, change the one that is used\n        //// as the golden source/model for this autogeneration\n        //// (i.e. the one dedicated to the integer values).\n        //// -----------------------------------------------------");
				line = line.Replace(originalSourceClassName, checkClassName);
				line = line.Replace("<int>", "<" + config.TypeName + ">");
				line = line.Replace("int ", config.TypeName + " ");
				line = line.Replace("(int)", "(" + config.TypeName + ")");
				line = line.Replace("int?", config.TypeName + "?");
				line = line.Replace("on an integer value", "on a " + config.TypeName + " value");
				line = line.Replace(@"// Since this class is the model/template for the generation of the tests on all the other numbers types, don't forget to re-generate all the other classes every time you change this one. To do that, just save the .\T4\NumberTestsGenerator.tt file within Visual Studio 2012. This will trigger the T4 code generation process.", @"#pragma warning restore 169");
				line = line.Replace("Zero = 0;", "Zero = " + config.ValueForZero + ";");
				line = line.Replace("One = 1;", "One = " + config.ValueForOne + ";");
				line = line.Replace("one = 1;", "one = " + config.ValueForOne + ";");
				line = line.Replace("(1)", "(" + config.ValueForOne + ")");
				line = line.Replace("Two = 2;", "Two = " + config.ValueForTwo + ";");
				line = line.Replace("Twenty = 20;", "Twenty = " + config.ValueForTwenty + ";");
				line = line.Replace("MinusFifty = -50;", "MinusFifty = " + config.ValueForMinusFifty + ";");
				line = line.Replace("[int]", "["+ config.DetailedTypeName+ "]");
				line = line.Replace("[int?]", "["+ config.DetailedTypeName+ "?]");
				line = line.Replace(" int? ", " "+ config.DetailedTypeName+ "? ");
				
				sb.AppendLine(line);
			}
		}
		
		return sb.ToString();
    }

	public static void GenerateTestsViaCloning(string goldenSourceClassFileName, string originalSourceClassName, string outputFileNameSuffix, List<UnitTestsConfigurationForType> typesToWriteTestsFor, TemplateFileManager templateFileManager, TextTransformation textTransformation)
    {
		// TODO: infer the originalSourceClassName from the goldenSourceClassFileName last part

		foreach(var unitTestConfig in typesToWriteTestsFor)
		{
			// Creates a TextInfo based on the "en-US" culture in order to use the ToTitleCase() method
			System.Globalization.TextInfo textInfo = new System.Globalization.CultureInfo("en-US", false).TextInfo;
			string properlyCasedTypeName = textInfo.ToTitleCase(unitTestConfig.TypeName);
			string checkClassName =  properlyCasedTypeName + outputFileNameSuffix;
		
			// Prepares he creation of a new output file
			templateFileManager.StartNewFile(checkClassName + ".cs");
		
			// Infers the source code for this new output file
			string sourceCode = TypeCloningHelper.GenerateTestSourceCode(goldenSourceClassFileName, originalSourceClassName, checkClassName, unitTestConfig);
			textTransformation.Write(sourceCode);
		}
    }
}

#>