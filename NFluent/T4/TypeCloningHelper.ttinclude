<#+
	// --------------------------------------------------------------------------------------------------------------------
    // <copyright file="TypeCloningHelper.ttinclude" company="">
    //   Copyright 2013 Thomas PIERRAIN
    //   Licensed under the Apache License, Version 2.0 (the "License");
    //   you may not use this file except in compliance with the License.
    //   You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //   Unless required by applicable law or agreed to in writing, software
    //   distributed under the License is distributed on an "AS IS" BASIS,
    //   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    //   See the License for the specific language governing permissions and
    //   limitations under the License.
    // </copyright>
    // --------------------------------------------------------------------------------------------------------------------

/// <summary>
/// Provides a way to clone an existing generic type into other ones with different type params.
/// </summary>
public static class TypeCloningHelper
{
	public static string GenerateSourceCode(string goldenSourceClassFileName, string checkClassName, string targetTypeName)
    {
		// Retrieves the class to use as the golden source for all numbers
		StringBuilder sb = new StringBuilder();
		using (StreamReader sr = new StreamReader(goldenSourceClassFileName)) 
		{
			string line;
			// Read and display lines from the file until the end of 
			// the file is reached.
			while ((line = sr.ReadLine()) != null) 
			{
				line = line.Replace("private const string DoNotChangeOrRemoveThisLine = Constants.AutoGeneratedNumberClassDisclaimerPlaceHolder;", "#pragma warning disable 169\n\n        //// ---------------------- WARNING ----------------------\n        //// AUTO-GENERATED FILE WHICH SHOULD NOT BE MODIFIED!\n        //// To change this class, change the one that is used\n        //// as the golden source/model for this autogeneration\n        //// (i.e. the one dedicated to the integer values).\n        //// -----------------------------------------------------");
				line = line.Replace("IntCheckExtensions", checkClassName);
				line = line.Replace("<int>", "<" + targetTypeName + ">");
				line = line.Replace("(int)", "(" + targetTypeName + ")");
				line = line.Replace("<int?>", "<" + targetTypeName + "?>");
				line = line.Replace("int ", targetTypeName + " ");
				line = line.Replace("an <see cref=\"int\"/> value", "an <see cref=\"" + targetTypeName + "\"/> value");
				line = line.Replace(@"// Since this class is the model/template for the generation of all the other numbers related CheckExtensions classes, don't forget to re-generate all the other classes every time you change this one. To do that, just save the ..\T4\NumberFluentAssertionGenerator.tt file within Visual Studio 2012. This will trigger the T4 code generation process.", @"#pragma warning restore 169");
				sb.AppendLine(line);
			}
		}
		
		return sb.ToString();
    }
}

#>